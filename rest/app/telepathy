#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright (c) 2014 xavier <xavier@laptop-300E5A>


'''Intuition api

Usage:
  api -h | --help
  api --version
  api [--bind=<ip>] [--port=<port>] [-d | --debug] [-f | --frontend]

Options:
  -h --help       Show this screen.
  --version       Show version.
  --debug         Activates Flask debug
  --frontend      Run the queues web frontend
  --bind=<ip>     Listens on the given ip [default: 127.0.0.1]
  --port=<port>   Listens on the given port [default: 5000]
'''


import time
import os
from flask import Flask
from flask.ext import restful
from flask.ext.restful import reqparse
from docopt import docopt
import rq
from rq_dashboard import RQDashboard
from redis import Redis

from telepathy.portfolios import RethinkdbPortfolios
import telepathy.node as node

app = Flask(__name__)
api = restful.Api(app)

q = rq.Queue('high', connection=Redis(
    host=os.getenv('MSG_HOST', 'localhost'),
    port=int(os.getenv('MSG_PORT', 6379))))


class Node(restful.Resource):
    jobs = {}

    def get(self):
        ''' Return status report '''
        parser = reqparse.RequestParser()
        parser.add_argument('id', type=str, required=True)
        args = parser.parse_args()

        #TODO Detect and report failure
        if args['id'] in self.jobs:
            elapsed = time.time() - self.jobs[args['id']]['start']
            report = self.jobs[args['id']]['worker'].result or \
                {'running': True,
                 'elapsed': elapsed,
                 'id': args['id']}
        else:
            report = {'error': 'job {} unknown'.format(args['id'])}

        return report

    def put(self):
        parser = reqparse.RequestParser()
        parser.add_argument('id', type=str, required=True)
        parser.add_argument('context', type=str, required=True)
        args = parser.parse_args()

        #TODO Make a difference between backtest and live
        self.jobs[args['id']] = {}
        self.jobs[args['id']]['worker'] = \
            q.enqueue_call(func=node.trade,
                           args=(args['id'], args['context'],),
                           timeout=-1)
        self.jobs[args['id']]['start'] = time.time()

        return {'enqueued': True,
                'id': args['id'],
                'start': time.time()}


class Portfolios(restful.Resource):
    db = RethinkdbPortfolios()

    def get(self):
        parser = reqparse.RequestParser()
        parser.add_argument('id', type=str, action='append', required=True)
        parser.add_argument('key', type=str, action='append', required=True)
        parser.add_argument('from', type=int)
        parser.add_argument('to', type=int)
        #TODO parser.add_argument('date', type=str)
        #TODO parser.add_argument('less', type=float)
        #TODO parser.add_argument('more', type=float)
        args = parser.parse_args()

        if args['from']:
            data = self.db._build_datapoints(
                args['id'], args['key'], args['from'], args['to'])
        else:
            data = self.db._build_values(args['id'], args['key'])

        return data


api.add_resource(Portfolios, '/api/v1/portfolios')
api.add_resource(Node, '/api/v1/node')

if __name__ == '__main__':
    args = docopt(__doc__, version='Intuition api 0.0.1')

    if args['-f'] or args['--frontend']:
        RQDashboard(app, url_prefix='/queues')

    app.run(host=args['--bind'],
            port=int(args['--port']),
            debug=args['--debug'])
